buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}

version = projectVersion
group = 'org.grails.plugins'

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-plugin-publish"
apply plugin: "org.grails.grails-gsp"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin: 'com.jfrog.artifactory'

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    compile "org.grails.plugins:spring-security-core:$springSecurityCoreVersion"
    testCompile "org.grails:grails-gorm-testing-support"
    //testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails:grails-web-testing-support"
    compile "org.springframework.security:spring-security-core:$springSecurityVersion", {
        ['spring-aop', 'spring-beans', 'spring-context', 'spring-core', 'spring-expression'].each {
            exclude module: it
        }
    }


}

apply from: "${rootProject.projectDir}/gradle/grailsPublish.gradle"
apply from: "${rootProject.projectDir}/gradle/artifactoryPublish.gradle"
apply from: "${rootProject.projectDir}/gradle/testVerbose.gradle"

assets {
    packagePlugin = true
}

task copyGspIntoTemplates {
    ext.inputFolders = ['aclClass',
                            'aclEntry',
                            'aclObjectIdentity',
                            'aclSid',
                            'includes',
                            'layouts',
                            'login',
                            'persistentLogin',
                            'register',
                            'registrationCode',
                            'requestmap',
                            'role',
                            'securityInfo',
                            'user']
    doLast {
        mkdir "${project.projectDir}/src/main/templates/views"
        for ( String folder : inputFolders ) {
            mkdir "${project.projectDir}/src/main/templates/views/${folder}"
        }
        for ( int i = 0; i < inputFolders.size(); i++ ) {
            copy {
                from(fileTree("${project.projectDir}/grails-app/views/${inputFolders[i]}")) {
                    include '*.gsp'
                }
                into "${project.projectDir}/src/main/templates/views/${inputFolders[i]}"
            }
        }
    }
}

task removeGspFromTemplates {
    doLast {
        for ( String folder : copyGspIntoTemplates.inputFolders ) {
            delete "${project.projectDir}/src/main/templates/views/${folder}"
        }
        delete "${project.projectDir}/src/main/templates/views"
    }

}

compileAstJava.dependsOn copyGspIntoTemplates